"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.map = void 0;
exports.map = {
    COLS: 24,
    ROWS: 21,
    TSIZE: 32,
    layers: [[
            10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 1, 1, 1, 1, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13,
            12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 1, 1, 1, 1, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11,
            10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 1, 1, 1, 1, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13,
            12, 13, 12, 13, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11,
            10, 11, 10, 11, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 12, 13, 12, 13, 12, 13,
            12, 13, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 10, 11, 10, 11, 10, 11,
            10, 11, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 12, 13, 12, 13,
            12, 13, 12, 13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 10, 11, 10, 11,
            10, 11, 10, 11, 1, 1, 1, 1, 5, 3, 3, 3, 4, 12, 13, 2, 2, 2, 2, 1, 1, 1, 12, 13,
            12, 13, 12, 13, 7, 3, 3, 3, 6, 1, 1, 1, 1, 10, 11, 12, 13, 1, 1, 1, 1, 1, 10, 11,
            10, 11, 10, 11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 13, 10, 11, 1, 1, 22, 23, 1, 12, 13,
            12, 13, 12, 13, 1, 1, 1, 1, 1, 22, 18, 23, 1, 10, 11, 2, 2, 1, 22, 17, 20, 1, 10, 11,
            10, 11, 10, 11, 12, 13, 1, 22, 18, 17, 17, 20, 1, 2, 2, 2, 2, 2, 24, 17, 17, 23, 12, 13,
            12, 13, 12, 13, 10, 11, 1, 24, 17, 17, 17, 25, 1, 2, 2, 2, 2, 2, 2, 24, 17, 20, 10, 11,
            10, 11, 10, 11, 12, 13, 1, 1, 24, 19, 25, 1, 1, 2, 2, 2, 2, 2, 2, 1, 24, 25, 12, 13,
            12, 13, 12, 13, 10, 11, 1, 1, 1, 1, 7, 3, 3, 4, 2, 2, 2, 2, 2, 1, 1, 1, 10, 11,
            10, 11, 10, 11, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 12, 13, 2, 2, 1, 1, 1, 1, 12, 13,
            12, 13, 12, 13, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 10, 11, 2, 2, 1, 1, 1, 1, 10, 11,
            10, 11, 10, 11, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13,
            12, 13, 12, 13, 12, 13, 12, 13, 12, 13, 1, 1, 1, 1, 10, 11, 10, 11, 10, 11, 10, 11, 10, 11,
            10, 11, 10, 11, 10, 11, 10, 11, 10, 11, 1, 1, 1, 1, 12, 13, 12, 13, 12, 13, 12, 13, 12, 13
        ], [
            14, 15, 14, 15, 14, 15, 14, 15, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15,
            14, 15, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 14, 15, 14, 15,
            14, 15, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 0, 0, 0, 0, 0, 0,
            0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 14, 15, 14, 15,
            14, 15, 26, 27, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 27, 16, 16, 16, 16, 16, 0, 0, 14, 15,
            14, 15, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 16, 16, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 14, 15,
            14, 15, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 0, 0, 14, 15,
            14, 15, 14, 15, 12, 13, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 14, 15, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 14, 15,
            14, 15, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 27, 16, 16, 16, 0, 0, 0, 14, 15,
            14, 15, 14, 15, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 14, 15, 26, 27, 14, 15, 14, 15, 14, 15,
            14, 15, 14, 15, 26, 27, 26, 27, 14, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 15, 14, 15, 14, 15, 14, 15, 14, 15,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        ]],
    getTile: function (layer, col, row) {
        return this.layers[layer][row * exports.map.COLS + col];
    },
    isSolidTileAtXY: function (x, y, dirX, dirY) {
        const col = Math.floor(x / this.TSIZE);
        const row = Math.floor(y / this.TSIZE);
        return this.layers.reduce(function (res, layer, index) {
            const tile = this.getTile(index, col, row);
            const isSolid = tile === 10 || tile === 11 || tile === 12 || tile === 13;
            const oneWay = ((tile === 3) && (row * this.TSIZE + 16) < y && (dirY === -1 || dirX !== 0)) ||
                (tile === 4 && (row * this.TSIZE + 16) < y && (dirY === -1 || dirX === -1)) ||
                (tile === 7 && (row * this.TSIZE + 16) < y && (dirY === -1 || dirX === 1)) ||
                (tile === 5 && (row * this.TSIZE + 16) < y && (col * this.TSIZE + 16) < x) ||
                (tile === 8 && (row * this.TSIZE + 16) < y && (col * this.TSIZE + 16) > x) ||
                (tile === 6 && (((row * this.TSIZE + 16) < y && (dirY === -1 || dirX !== 0)) ||
                    ((col * this.TSIZE + 16) < x && (dirX === -1 || dirY !== 0)))) ||
                (tile === 9 && ((((row * this.TSIZE + 16) < y && (dirY === -1 || dirX !== 0))) ||
                    ((col * this.TSIZE + 16) > x && (dirX === 1 || dirY !== 0))));
            return res || isSolid || oneWay;
        }.bind(this), false);
    },
    // collisionTileAtBox: function(leftBoundry: number, rightBoundry: number, topBoundry: number, bottomBoundry: number) {
    // }
    getCol: function (x) {
        return Math.floor(x / this.TSIZE);
    },
    getRow: function (y) {
        return Math.floor(y / this.TSIZE);
    },
    getX: function (col) {
        return col * this.TSIZE;
    },
    getY: function (row) {
        return row * this.TSIZE;
    }
};
//# sourceMappingURL=map.js.map